# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/permission/permission.gni")
import("//build/test.gni")

module_output_path = "permission_standard/permissiontest"

config("private_config") {
  cflags_cc = [ "-fexceptions" ]
}

ohos_unittest("sensitive_switch_test") {
  module_out_path = module_output_path

  sources = [
    "${distributed_permission_services_path}/main/cpp/src/remind/remind_info.cpp",
    "sensitive_switch_test.cpp",
  ]

  configs = [
    ":private_config",
    "${distributed_permission_services_path}/test:permission_test_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${distributed_permission_frameworks_log_path}:permission_standard_infrastructure_cxx",
    "${distributed_permission_innerkits_distributed_path}:distributed_permission_innerkits",
    "${distributed_permission_innerkits_sdk_path}:libpermissionsdk_standard",
    "${distributed_permission_services_path}:distributed_permission_services",
    "${distributed_permission_services_path}:distributed_permission_services",
    "${permission_path}/frameworks/permission_standard/permissioncommunicationadapter:permission_standard_communication_adapter_cxx",
    "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr",
    "//base/notification/ans_standard/frameworks/ans/core:ans_core",
    "//base/notification/ans_standard/frameworks/wantagent:wantagent_innerkits",
    "//base/startup/init_lite/services/log:init_log",
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara:syspara",
    "//foundation/aafwk/standard/interfaces/innerkits/base:base",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core:appexecfwk_core",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//foundation/distributedhardware/devicemanager/interfaces/inner_kits/native_cpp:devicemanagersdk",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/sqlite:sqlite",
    "//third_party/zlib:libz",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "aafwk_standard:want",
    "ces_standard:cesfwk_core",
    "ces_standard:cesfwk_innerkits",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_L2:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = [ ":sensitive_switch_test" ]
}
