# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/features.gni")
import("//build/ohos.gni")
import("//build/test.gni")
import("//drivers/adapter/uhdf2/uhdf.gni")
import("../../camera.gni")

module_output_path = "hdf/fuzz_test"

ohos_fuzztest("IPCCameraDeviceRemote_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [
    "$camera_path/../interfaces/include/server/camera_device_service_stub.cpp",
    "./IPCCameraDeviceRemote_fuzzer/IPCCameraDeviceRemote_fuzzer.cpp",
  ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCCameraDeviceRemote_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCCameraHostService_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [ "./IPCCameraHostService_fuzzer/IPCCameraHostService_fuzzer.cpp" ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCCameraHostService_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCOffline_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [ "./IPCOffline_fuzzer/IPCOffline_fuzzer.cpp" ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCOffline_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCStreamOperator_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [ "./IPCStreamOperator_fuzzer/IPCStreamOperator_fuzzer.cpp" ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCStreamOperator_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCCameraDeviceCallback_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources =
      [ "./IPCCameraDeviceCallback_fuzzer/IPCCameraDeviceCallback_fuzzer.cpp" ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCCameraDeviceCallback_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCCameraHostCallback_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources =
      [ "./IPCCameraHostCallback_fuzzer/IPCCameraHostCallback_fuzzer.cpp" ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCCameraHostCallback_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

ohos_fuzztest("IPCStreamOperatorCallback_fuzzer") {
  module_out_path = module_output_path
  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]
  sources = [
    "./IPCStreamOperatorCallback_fuzzer/IPCStreamOperatorCallback_fuzzer.cpp",
  ]

  include_dirs = [
    "./include",
    "$camera_path/test/fuzz/IPCStreamOperatorCallback_fuzzer",
    "$camera_path/../interfaces/include",
    "$camera_path/../interfaces/include/client",
    "$camera_path/../interfaces/include/server",
    "$camera_path/../interfaces/include/callback/host",
    "$camera_path/../interfaces/include/callback/device",
    "$camera_path/../interfaces/include/callback/operator",
    "$camera_path/include",
    "$camera_path/hdi_impl",
    "$camera_path/hdi_impl/include",
    "$camera_path/hdi_impl/include/camera_host",
    "$camera_path/hdi_impl/include/camera_device",
    "$camera_path/hdi_impl/include/stream_operator",
    "$camera_path/hdi_impl/include/offline_stream_operator",
    "$camera_path/device_manager/include/",
    "$camera_path/device_manager/include/mpi",
    "$camera_path/pipeline_core/utils",
    "$camera_path/pipeline_core/pipeline_impl/include",
    "$camera_path/pipeline_core/host_stream/include",
    "$camera_path/pipeline_core/include",
    "$camera_path/pipeline_core/ipp/include",
    "$camera_path/pipeline_core/nodes/include",
    "//base/hiviewdfx/interfaces/innerkits/libhilog/include",
    "$camera_path/utils/event",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata/include",
  ]

  deps = [
    "$camera_path/../interfaces/include/client:libcamera_client",
    "$camera_path/buffer_manager:camera_buffer_manager",
    "$camera_path/device_manager:camera_device_manager",
    "$camera_path/hdi_impl:camera_hdi_impl",
    "$camera_path/pipeline_core:camera_pipeline_core",
    "$hdf_uhdf_path/config:libhdf_hcs",
    "$hdf_uhdf_path/hdi:libhdi",
    "$hdf_uhdf_path/osal:libhdf_utils",
    "//drivers/adapter/uhdf2/host:libhdf_host",
    "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/peripheral/display/hal:hdi_display_gralloc",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimedia/camera_standard/frameworks/innerkitsimpl/metadata:metadata",
    "//utils/native/base:utils",
  ]

  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  external_deps += [
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  install_enable = true
  subsystem_name = "hdf"
  part_name = "hdf"
}

group("fuzztest") {
  testonly = true
  deps = [
    ":IPCCameraDeviceCallback_fuzzer",
    ":IPCCameraDeviceRemote_fuzzer",  #引用测试套
    ":IPCCameraHostCallback_fuzzer",
    ":IPCCameraHostService_fuzzer",
    ":IPCOffline_fuzzer",
    ":IPCStreamOperatorCallback_fuzzer",
    ":IPCStreamOperator_fuzzer",
  ]
}
