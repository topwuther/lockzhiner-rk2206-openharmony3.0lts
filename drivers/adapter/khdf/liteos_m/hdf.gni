#
# Copyright (c) 2021, Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//kernel/liteos_m/config.gni")
khdf_path = "//drivers/adapter/khdf/liteos_m"
hdf_fwk_path = "//drivers/framework"
kernel_path = "//kernel/liteos_m"
template("hdf_driver") {
  if (defined(invoker.hcs_sources)) {
    action_foreach("hc_gen") {
      script = "$hdf_fwk_path/tools/hc-gen/build_hcs.py"
      sources = invoker.hcs_sources
      outputs = [ "$target_gen_dir/{{source_name_part}}_hex.c" ]
      args = [
        "-i",
        "-o",
        rebase_path("$target_gen_dir/{{source_name_part}}"),
        "{{source}}",
      ]
    }
  }
  static_library(target_name) {
    if (defined(invoker.hcs_sources)) {
      hc_gen = ":hc_gen"
      generated_sources = get_target_outputs(hc_gen)
      print(generated_sources)
      if (defined(invoker.sources)) {
        sources += generated_sources
      } else {
        sources = generated_sources
      }
      if (defined(invoker.deps)) {
        deps += [ hc_gen ]
      } else {
        deps = [ hc_gen ]
      }
    }
  }
}
