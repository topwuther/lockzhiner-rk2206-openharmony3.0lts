# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type wms_service, domain, coredomain;
type wms_service_exec, exec_type, file_type, system_file_type;

domain_auto_trans(init, wms_service_exec, wms_service)

# avc: denied { read write } for comm="wms_service" name="card0" dev="tmpfs" ino=2442 scontext=u:r:wms_service:s0 tcontext=u:object_r:graphic_device:s0 tclass=chr_file permissive=1
# avc: denied { getattr } for comm="wms_service" path="/dev/dri/card0" dev="tmpfs" ino=631 scontext=u:r:wms_service:s0 tcontext=u:object_r:graphic_device:s0 tclass=chr_file permissive=1
allow wms_service graphic_device:chr_file { open read write getattr ioctl };

#allow wms_service weston_sock:sock_file { write };

# avc: denied { connectto } for comm="wms_service" path="/dev/socket/wayland-0" scontext=u:r:wms_service:s0 tcontext=u:r:weston:s0 tclass=unix_stream_socket permissive=1
allow wms_service weston:unix_stream_socket { connectto };

# avc: denied { call } for comm="wms_service" scontext=u:r:wms_service:s0 tcontext=u:r:wm_test:s0 tclass=binder permissive=1
binder_call(wms_service, wm_test)

# avc: denied { call } for comm="samgr" scontext=u:r:samgr:s0 tcontext=u:r:wms_service:s0 tclass=binder permissive=1
binder_call(samgr, wms_service)

# avc: denied { ioctl } for comm="wms_service" path="/dev/pts/1" dev="devpts" ino=4 ioctlcmd=0x5401 scontext=u:r:wms_service:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file permissive=1
# avc: denied { getattr } for comm="wms_service" path="/dev/pts/2" dev="devpts" ino=5 scontext=u:r:wms_service:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file permissive=1
allow wms_service devpts:chr_file { ioctl getattr };

# avc: denied { read write } for name="1" dev="devpts" ino=4 scontext=u:r:wms_service:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file permissive=1
# avc: denied { open } for path="/dev/pts/1" dev="devpts" ino=4 scontext=u:r:wms_service:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file permissive=1
allow wms_service devpts:chr_file { open read write };

# avc: denied { execute_no_trans } for path="/system/bin/wms_service" dev="mmcblk0p3" ino=322 scontext=u:r:wms_service:s0 tcontext=u:object_r:wms_service_exec:s0 tclass=file permissive=1
allow wms_service wms_service_exec:file { execute_no_trans };

# avc: denied { write } for name="hilogInput" dev="tmpfs" ino=2370 scontext=u:r:wms_service:s0 tcontext=u:object_r:socket_device:s0 tclass=sock_file permissive=1
#allow wms_service socket_device:sock_file { write };

# avc: denied { call } for scontext=u:r:wms_service:s0 tcontext=u:r:samgr:s0 tclass=binder permissive=1
binder_call(wms_service, samgr)
