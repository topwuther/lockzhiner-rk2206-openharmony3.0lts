# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//foundation/communication/dsoftbus/dsoftbus.gni")

config("trans_udp_channel_sdk_interface") {
  include_dirs = [
    "common/include",
    "$dsoftbus_root_path/interfaces/kits/common",
  ]
}

if (enable_trans_udp == true) {
  common_src = [ "common/src/client_trans_udp_manager.c" ]
} else {
  common_src = [
    "common/src/client_trans_udp_virtual.c",
    "file/src/client_trans_file_virtual.c",
  ]
}

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  if (enable_trans_udp == true) {
    common_deps = [
      "$dsoftbus_root_path/adapter:softbus_adapter",
      "$dsoftbus_root_path/core/common/log:softbus_log",
      "$dsoftbus_root_path/core/common/utils:softbus_utils",
      "$dsoftbus_sdk_path/transmission/ipc:dsoftbus_trans_ipc_proxy_sdk",
      "$hilog_lite_deps_path",
    ]
  }

  if (ohos_kernel_type == "liteos_m") {
    static_library("dsoftbus_trans_udp_channel_sdk") {
      include_dirs = [
        "$dsoftbus_root_path/interfaces/kits/transport",
        "$dsoftbus_core_path/common/include",
        "$dsoftbus_root_path/sdk/transmission/session/include",
        "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/file/include",
        "stream/include",
      ]
      sources = common_src
      public_configs = [ ":trans_udp_channel_sdk_interface" ]

      if (enable_trans_udp == true) {
        deps = common_deps
      }
    }
  } else {
    shared_library("dsoftbus_trans_udp_channel_sdk") {
      include_dirs = [
        "$dsoftbus_root_path/interfaces/kits/transport",
        "$dsoftbus_core_path/common/include",
        "$dsoftbus_root_path/sdk/transmission/session/include",
        "stream/include",
        "file/include",
        "//third_party/bounds_checking_function/include",
        "$dsoftbus_root_path/core/connection/interface",
        "$dsoftbus_root_path/core/transmission/common/include",
      ]
      cflags = [
        "-Wall",
        "-fPIC",
      ]
      sources = common_src
      public_configs = [ ":trans_udp_channel_sdk_interface" ]

      if (enable_trans_udp == true) {
        deps = [
          "$dsoftbus_root_path/core/connection/common:conn_common",
          "//third_party/bounds_checking_function:libsec_shared",
        ]
        deps += common_deps
        if (enable_trans_udp_stream == true) {
          sources += [ "stream/src/client_trans_stream.c" ]
          deps += [ "stream/adaptor:dsoftbus_trans_dstream" ]
        } else {
          sources += [ "stream/src/client_trans_stream_virtual.c" ]
        }

        if (enable_trans_udp_file == true) {
          sources += [
            "file/src/client_trans_file.c",
            "file/src/client_trans_file_listener.c",
            "file/src/file_adapter.c",
          ]
          deps += [ "$dsoftbus_root_path/core/connection/common:conn_common" ]
          native_source_path = rebase_path("$dsoftbus_root_path")
          dep_file = "components/nstackx_enhanced/nstackx_core/dfile/BUILD.gn"
          enhanced = exec_script(
                  "$dsoftbus_root_path/run_shell_cmd.py",
                  [ "cd $native_source_path; if [ -f $dep_file ]; then echo true; else echo false; fi" ],
                  "value")
          if (enhanced) {
            include_dirs += [
              "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_core/dfile/interface",
              "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_util/interface",
            ]
            deps += [ "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_core/dfile:nstackx_dfile" ]
          } else {
            include_dirs += [
              "$dsoftbus_root_path/components/nstackx/nstackx_core/dfile/interface",
              "$dsoftbus_root_path/components/nstackx/nstackx_util/interface",
            ]
            deps += [ "$dsoftbus_root_path/components/nstackx/nstackx_core/dfile:nstackx_dfile.open" ]
          }
        } else {
          sources += [ "file/src/client_trans_file_virtual.c" ]
        }
      }
    }
  }
} else {
  import("//build/ohos.gni")

  ohos_shared_library("dsoftbus_trans_udp_channel_sdk") {
    include_dirs = [
      "$dsoftbus_root_path/interfaces/kits/transport",
      "$dsoftbus_core_path/common/include",
      "$dsoftbus_root_path/sdk/transmission/session/include",
      "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/stream/include",
      "$softbus_adapter_common/include",
      "file/include",
      "$dsoftbus_root_path/core/connection/interface",
      "$dsoftbus_root_path/core/transmission/common/include",
    ]
    sources = common_src
    public_configs = [ ":trans_udp_channel_sdk_interface" ]
    if (enable_trans_udp == true) {
      deps = [
        "$dsoftbus_root_path/adapter:softbus_adapter",
        "$dsoftbus_root_path/core/common/utils:softbus_utils",
        "$dsoftbus_root_path/core/connection/common:conn_common",
        "$dsoftbus_sdk_path/transmission/ipc:dsoftbus_trans_ipc_proxy_sdk",
        "//utils/native/base:utilsecurec_shared",
      ]
      if (enable_trans_udp_stream == true) {
        sources += [ "stream/src/client_trans_stream.c" ]
        deps += [ "stream/adaptor:dsoftbus_trans_dstream" ]
      } else {
        sources += [ "stream/src/client_trans_stream_virtual.c" ]
      }
      if (enable_trans_udp_file == true) {
        sources += [
          "file/src/client_trans_file.c",
          "file/src/client_trans_file_listener.c",
          "file/src/file_adapter.c",
        ]
        deps += [ "$dsoftbus_root_path/core/connection/common:conn_common" ]
        native_source_path = rebase_path("$dsoftbus_root_path")
        dep_file = "components/nstackx_enhanced/nstackx_core/dfile/BUILD.gn"
        enhanced = exec_script(
                "$dsoftbus_root_path/run_shell_cmd.py",
                [ "cd $native_source_path; if [ -f $dep_file ]; then echo true; else echo false; fi" ],
                "value")
        if (enhanced) {
          include_dirs += [
            "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_core/dfile/interface",
            "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_util/interface",
          ]
          deps += [ "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_core/dfile:nstackx_dfile" ]
        } else {
          include_dirs += [
            "$dsoftbus_root_path/components/nstackx/nstackx_core/dfile/interface",
            "$dsoftbus_root_path/components/nstackx/nstackx_util/interface",
          ]
          deps += [ "$dsoftbus_root_path/components/nstackx/nstackx_core/dfile:nstackx_dfile.open" ]
        }
      } else {
        sources += [ "file/src/client_trans_file_virtual.c" ]
      }
    }
    if (is_standard_system) {
      external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
    }
    part_name = "dsoftbus_standard"
    subsystem_name = "communication"
  }
}
